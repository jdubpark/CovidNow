!function(t){var e={};function o(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(r,a,function(e){return t[e]}.bind(null,a));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=13)}([function(t,e,o){"use strict";o.r(e),o.d(e,"formatDate",(function(){return a})),o.d(e,"commas",(function(){return n})),o.d(e,"percent",(function(){return c}));var r=o(1);function a(t,e=!0){const o=new Date(t),a=o.getMonth(),n=o.getDate();if(!e)return`${r.long[a]} ${n}`;let c=o.getHours(),s=o.getMinutes(),i=c>=12?"pm":"am";c%=12,c=c||12,s=s<10?"0"+s:s;const l=`${c}:${s} ${i}`;return`${r.short[a]} ${n}, ${l}`}function n(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}function c(t,e,o=2){let r;return r="number"!=typeof num||"number"!=typeof e?Number(t)/Number(e)*100:t/e*100,isFinite(r)?r.toFixed(o):void 0}},function(t){t.exports=JSON.parse('{"short":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"long":["January","February","March","April","May","June","July","August","September","October","November","December"]}')},,,,,,,,,function(t,e,o){var r=o(14),a=o(15),n=o(16),c=o(18);t.exports=function(t,e){return r(t)||a(t,e)||n(t,e)||c()}},function(t){t.exports=JSON.parse('{"Iran (Islamic Republic of)":"Iran","occupied Palestinian territory":"Palestine","Democratic Republic of the Congo":"DR Congo","Republic of Korea":"South Korea","Korea, South":"South Korea","Democratic Republic of Korea":"North Korea","Republic of Moldova":"Moldova","Russian Federation":"Russia","United Arab Emirates":"UAE","United Kingdom":"UK"}')},,function(t,e,o){"use strict";o.r(e);var r=o(10),a=o.n(r),n=o(0),c=o(11),s=(Object.keys(c),{global:{},usa:{}});function i(t){var e=t.lat,o=t.lng,r=t.info,a=t.cases;e||o?$("#you-search-invalid").removeClass("show"):$("#you-search-invalid").addClass("show"),$("#you-search-lat val").text(e),$("#you-search-long val").text(o);var n=r.county,c=r.state;$("#geoloc-county-name").text(n),$("#geoloc-state-name span").text(c),$("#geoloc-county .confirmed .num").text(a.county.confirmed),$("#geoloc-county .deaths .num").text(a.county.deaths),$("#geoloc-state .confirmed .num").text(a.state.confirmed),$("#geoloc-state .deaths .num").text(a.state.deaths)}var l=!1;function u(){if(l)return!1;l=!0;var t=$("#you-search-bar").val();$("#you-search-btn").addClass("disabled"),$("#you-search-invalid").removeClass("show"),$("#you-search-lat val").html("locating..."),$("#you-search-long val").html("locating...");var e=$.ajax({method:"GET",url:"https://covidnow.com/api/v1/local/finder",data:{address:t},dataType:"json"});e.done((function(t){l=!1,$("#you-search-btn").removeClass("disabled"),i(t)})),e.fail((function(t,e,o){return console.error(t,e,o)}))}!function(t){t("#you-search-bar").keydown((function(t){13==t.keyCode&&u()})),t("#you-search-btn").on("click",u),t("#you-search-lat val").html("search..."),t("#you-search-long val").html("search...");var e=t.ajax({method:"GET",url:"https://covidnow.com/api/v1/global/stats",dataType:"json"}),o=t.ajax({method:"GET",url:"https://covidnow.com/api/v1/global/countries",dataType:"json"}),r=t.ajax({method:"GET",url:"https://covidnow.com/api/v1/news/usa",dataType:"json"}),c=t.ajax({method:"GET",url:"https://covidnow.com/api/v1/usa/cases",dataType:"json"});e.fail((function(t,e,o){return console.error(t,e,o)})),o.fail((function(t,e,o){return console.error(t,e,o)})),r.fail((function(t,e,o){return console.error(t,e,o)})),c.fail((function(t,e,o){return console.error(t,e,o)})),e.done((function(e){var o=e.total,r=e.deaths,a=e.recovered;s.global.stats=e,t("#stats-last-update span").text(n.formatDate(o.ts)),t("#stats-confirmed-total").text(n.commas(o.val)),t("#stats-deaths-total").text(n.commas(r.val)),t("#stats-recov-total").text(n.commas(a.val));var c={fatality:n.percent(r,o.val),recovery:n.percent(a,o.val)};t("#stats-fatality-rate span").text(c.fatality),t("#stats-recovery-rate span").text(c.recovery)})),o.done((function(e){var o=e.countries;s.global.countries=e.countries;var r=Object.keys(o).length-1;t("#stats-confirmed-countries span").text(r);["deaths","recovered","total"].forEach((function(e){var r=e;"total"===r&&(r="confirmed"),o.sort((function(t,e){return t[r]<e[r]?1:t[r]>e[r]?-1:0}));var a=o.slice(0,10),c=t("#stats-top-countries-".concat(e));c.html(""),a.forEach((function(t){var o=t.country,a=t[r],i={global:"&nbsp;",country:"&nbsp;"};["deaths","recovered"].includes(e)?(i.global=n.percent(a,s.global.stats[e].val)+"%",i.country=n.percent(a,t.confirmed)+"%"):i.country=n.percent(a,s.global.stats[e].val)+"%";var l="<li>"+'<div class="hero-fc-top-name">'.concat(o,"</div>")+'<div class="hero-fc-top-num num">'.concat(n.commas(a),"</div>")+'<div class="hero-fc-top-rates">'+'<span class="glob">'.concat(i.global,"</span>")+'<span class="perc">'.concat(i.country,"</span>")+"</div></li>";c.append(l)}))}));var a=t("#hero-countries-table-body");t("#hero-countries-loading").addClass("loaded"),a.html(""),o.forEach((function(t){var e=t.country,o=t.confirmed,r=t.deaths,n=t.recovered,c='<div class="hero-country">'+'<div class="hero-country-name">'.concat(e,"</div>")+'<div class="hero-country-val total">'.concat(o,"</div>")+'<div class="hero-country-val deaths">'.concat(r,"</div>")+'<div class="hero-country-val recov">'.concat(n,"</div>")+'<div class="hero-country-dummy"></div></div>';a.append(c)}))})),r.done((function(e){t("#hero-news-list").html(""),e.__sorted.forEach((function(o){var r=e[o],a="<li>"+'<div class="pubdate">'.concat(n.formatDate(r.pubDate),"</div>")+'<div class="headline">'.concat(r.html,"</div>")+"</li>";t("#hero-news-list").append(a)}))})),c.done((function(e){var o=e.raw.data;o=Object.values(o).reverse().slice(0,50),t("#hero-cases-list").html(""),o.forEach((function(e){var o=a()(e,8),r=(o[0],o[1]),c=o[2],s=o[3],i=(o[4],o[5],o[6]),l=o[7],u=c+", "+s,d=l.replace(/^www./,""),f="<li>"+'<div class="pubdate">'.concat(n.formatDate(r,!1),"</div>")+'<div class="headline">'.concat(i,"</div>")+'<div class="location">'.concat(u,"</div>")+'<div class="source"> &mdash; <a href="'.concat("https://"+l||!1,'" target="_blank" rel="noopener">').concat(d,"</a></div>")+"</li>";t("#hero-cases-list").append(f)}))}))}(jQuery)},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var o=[],r=!0,a=!1,n=void 0;try{for(var c,s=t[Symbol.iterator]();!(r=(c=s.next()).done)&&(o.push(c.value),!e||o.length!==e);r=!0);}catch(t){a=!0,n=t}finally{try{r||null==s.return||s.return()}finally{if(a)throw n}}return o}}},function(t,e,o){var r=o(17);t.exports=function(t,e){if(t){if("string"==typeof t)return r(t,e);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(o):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?r(t,e):void 0}}},function(t,e){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var o=0,r=new Array(e);o<e;o++)r[o]=t[o];return r}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,